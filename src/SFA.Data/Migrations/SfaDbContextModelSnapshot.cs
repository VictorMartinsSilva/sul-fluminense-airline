// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFA.Data.Context;

namespace SFA.Data.Migrations
{
    [DbContext(typeof(SfaDbContext))]
    partial class SfaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SFA.Business.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(9)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SFA.Business.Models.Airplane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AirplaneModel")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PassengerNumber")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Airplanes");
                });

            modelBuilder.Entity("SFA.Business.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("SFA.Business.Models.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("AirPlaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destiny")
                        .IsRequired()
                        .HasColumnType("varchar(42)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("varchar(42)");

                    b.HasKey("Id");

                    b.HasIndex("AirPlaneId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("SFA.Business.Models.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<int>("TypePerson")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("SFA.Business.Models.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CheckedBaggage")
                        .HasColumnType("int");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HandBaggage")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.HasIndex("SeatId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SFA.Business.Models.SchedulingPassenger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PassengerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchedulingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("SchedulingId");

                    b.ToTable("SchedulingPassengers");
                });

            modelBuilder.Entity("SFA.Business.Models.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AirplaneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("TypeClass")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AirplaneId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("SFA.Business.Models.Address", b =>
                {
                    b.HasOne("SFA.Business.Models.Passenger", "Passenger")
                        .WithMany("Addresses")
                        .HasForeignKey("PassengerId")
                        .IsRequired();

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("SFA.Business.Models.Airplane", b =>
                {
                    b.HasOne("SFA.Business.Models.Company", "Company")
                        .WithMany("Airplanes")
                        .HasForeignKey("CompanyId")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("SFA.Business.Models.Flight", b =>
                {
                    b.HasOne("SFA.Business.Models.Airplane", "AirPlanes")
                        .WithMany("Flights")
                        .HasForeignKey("AirPlaneId")
                        .IsRequired();

                    b.Navigation("AirPlanes");
                });

            modelBuilder.Entity("SFA.Business.Models.Scheduling", b =>
                {
                    b.HasOne("SFA.Business.Models.Flight", "Flights")
                        .WithMany("Schedules")
                        .HasForeignKey("FlightId")
                        .IsRequired();

                    b.HasOne("SFA.Business.Models.Seat", "Seats")
                        .WithMany("Schedules")
                        .HasForeignKey("SeatId")
                        .IsRequired();

                    b.Navigation("Flights");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SFA.Business.Models.SchedulingPassenger", b =>
                {
                    b.HasOne("SFA.Business.Models.Passenger", "Passenger")
                        .WithMany("SchedulingPassengers")
                        .HasForeignKey("PassengerId")
                        .IsRequired();

                    b.HasOne("SFA.Business.Models.Scheduling", "Scheduling")
                        .WithMany("SchedulingPassengers")
                        .HasForeignKey("SchedulingId")
                        .IsRequired();

                    b.Navigation("Passenger");

                    b.Navigation("Scheduling");
                });

            modelBuilder.Entity("SFA.Business.Models.Seat", b =>
                {
                    b.HasOne("SFA.Business.Models.Airplane", "Airplane")
                        .WithMany("Seats")
                        .HasForeignKey("AirplaneId")
                        .IsRequired();

                    b.Navigation("Airplane");
                });

            modelBuilder.Entity("SFA.Business.Models.Airplane", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("SFA.Business.Models.Company", b =>
                {
                    b.Navigation("Airplanes");
                });

            modelBuilder.Entity("SFA.Business.Models.Flight", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SFA.Business.Models.Passenger", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("SchedulingPassengers");
                });

            modelBuilder.Entity("SFA.Business.Models.Scheduling", b =>
                {
                    b.Navigation("SchedulingPassengers");
                });

            modelBuilder.Entity("SFA.Business.Models.Seat", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
